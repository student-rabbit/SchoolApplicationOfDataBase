-- SampleDB
------------------------------------------------
/**********VIEW*********
 실제 존재하는 테이블이 아니라 필요로 하는 칼럼만 모아서 가상으로 테이블
 뷰 구문은 조회문인 SELECT 구문을 그대로 활용. SELECT 구문만 잘 익히면 어렵지 않음.

 * 사용하는 목적 *
 - 편의성
 - 보안

 * 뷰 생성시 칼럼명이 반드시 필요하다.
 * 뷰를 생성할 때 SELECT INTO(뷰 안에 복사본 만들기), ORDER BY를 사용할 수 없다.
 * 임시테이블을 기반으로 뷰를 생성할 수 없다.
 * 열 이름을 반드시 정해져야 한다. 
   집계 함수 등을 사용하여 만들어지는 열에는 이름을 지정하지 않으면 오류가 발생한다.

 CREATE VIEW 뷰명 -- 해당 이름으로 검색가능
 AS
 SELECT 구문 -- 출력하고자 하는 항목
 FROM 테이블
 WHERE
*/

SELECT *
FROM 성적

-- 예제. 이름과 점수로만 볼 수 있는 뷰 생성 ------------------------------------------------
-- 뷰 생성
CREATE VIEW 성적view
AS
SELECT 
       이름,
       점수
FROM 성적

-- 이름과 점수로만 이루어진 테이블 생성 완료
SELECT *
FROM 성적view


-- 예제, 점수가 80점 이상인 자료로만 볼 수 있는 뷰 생성 ------------------------------------------------
CREATE VIEW 성적80
AS
SELECT
       점수, 
       이름
FROM 성적
WHERE 점수 > 80

SELECT *
FROM 성적80


-- 예제. 성적테이블의 전체 평균 점수를 볼 수 있는 뷰 생성 ------------------------------------------------
/* 
 CREATE VIEW 평균점수
 AS
 SELECT
        AVG(점수)
 FROM 성적
 -- 열 이름이 지정되지 않았다는 오류 구문 발생

 SELECT * FROM 평균점수
 -- FROM 다음에 오는 것은 테이블. 테이블은 열 이름이 있어야 한다.
*/

CREATE VIEW 평균점수
AS
SELECT
       AVG(점수) 평균
FROM 성적

SELECT *
FROM 평균점수


/**********JOIN에 의한 VIEW**********/

-- 예제. 제품 테이블과 제품을 판매한 판매 테이블을 조인하여 뷰 '제품판매현황'을 생성하시오
-- (조회결과: 제품명, 종류, 판매수량) ------------------------------------------------
SELECT *
FROM 제품

SELECT *
FROM 판매

CREATE VIEW 제품판매현황
AS
SELECT 
       제품명,
       종류,
       판매수량
FROM 제품 JOIN 판매
ON 제품.제품번호 = 판매.제품번호

SELECT *
FROM 제품판매현황


/**********VIEW에 입력해보기*********
 -- 뷰는 가상 테이블이므로 실제 테이블이 입력된다.

 -- 뷰에 정의되지 않은 칼럼들은 널을 허용하거나 
 IDENTITY, TIMESTAMP, NULL허용, DEFAULT 등으로 정의되어 있어야 한다.

 INSERT 뷰테이블명
 VALUES(채워넣을 값들)

 뷰는 실제 테이블이 아니다. 보여질 항목만 보여주게 하는 역할이다.
 뷰를 통해서 입력을 하지만 실제 테이블에 입력이 되는 구나
*/

-- 뷰에 의한 입력: 학번, 이름, 점수로 뷰 생성 (테이블 명: 성적V) ------------------------------------------------
CREATE VIEW 성적V
AS
SELECT 
       학번,
       이름,
       점수
FROM 성적

SELECT *
FROM 성적V

INSERT 성적V
VALUES(2019099, '톰크루즈', 85)

SELECT *
FROM 성적
/*
 톰 크루즈가 입력되어 있다.(성별과 반에는 NULL)
 LIKE 실제 책에 구멍이 뚫린 종이를 놓고 낙서를 한 것(뷰에 의해서 입력)
 구멍이 뚫리지 않은 곳에는 낙서가 되어 있지 않음.(뷰가 가려져서 입력 X)

 뷰를 통해서 입력을 하지만 실제 테이블에 입력이 되는 구나
*/

/*
 -- 예시. 뷰 '성적VIEW'에 다음 레코드를 입력해보고 입력 결과의 의미를 설명해보시오.
 -- 이름(성춘향), 점수(70)

 INSERT 성적view
 VALUES('성춘향', 70)
 -- 성적 테이블의 학번은  NULL값을 입력할 수 없다는 오류 발생
 -- 성적VIEW에 이름과 점수를 입력하면, 성적테이블에는 학번과 성별, 반은 입력되지 않는다.

 뷰를 통한 입력은 뷰에서 입력하지 못하는 나머지 부분이 IDENTITY, TIMESTAMP, NULL허용, DEFAULT 등 저절로 값이 채워지는 옵션이 부여된 항목이여야 한다.
*/


/**********VIEW의 수정*********
 ALTER VIEW 뷰명
 AS
 SELECT 구문
*/

-- 에시. 성적80 뷰의 조건을 90점으로 만들어보기-----------------------------------------------
ALTER VIEW 성적80
AS
SELECT 
       이름,
       반,
       점수
FROM 성적
WHERE 점수 >= 90

SELECT *
FROM 성적80

-- 에시. 성적80 뷰의 조건을 80점으로 만들고, 톰크루즈의 성적을 70점으로 수정한다.-----------------------------------------------
ALTER VIEW 성적80
AS
SELECT 
       이름,
       반,
       점수
FROM 성적
WHERE 점수 >= 80

-- 톰크루즈의 성적을 70점으로 수정
UPDATE 성적80
SET 점수 = 70
WHERE 이름 = '톰크루즈'
/* 톰크루즈의 성적이 70점으로 바뀌어서 성적80 VIEW에서는 보이지 않음.
VIEW의 조건에 맞는 값만 보여준다. */


-- 뷰 활용하기(동영상 수업) - 과제(1) ------------------------------------------------
-- 교수테이블을 기반으로 교수명, 전공명 만 보여지는 뷰 '교수v' 를 생성하는 구문을 작성하세요.
-- 그리고 생성한 뷰를 select로 검색하는 구문을 작성하세요.
SELECT *
FROM 교수

CREATE VIEW 교수v
AS
SELECT
       교수명,
       전공명
FROM 교수

SELECT *
FROM 교수

SELECT * 
FROM 교수v

------------------------------------------------
/**********VIEW 정보(== 생성구문) 확인하기*********
SP_HELPTEXT 뷰이름
*/

SP_HELPTEXT 성적80
/* 아래와 같이 출력된다.
 CREATE VIEW 성적80
 AS
 SELECT 
        이름,
        반,
        점수
 FROM 성적
 WHERE 점수 >= 90
*/


-- 뷰 수정 예제. 앞서 만든 뷰 '성적V'의 조회 결과가 이름, 성별로 나타나도록 수정하시오. ------------------------------------------------
-- 작성한 구문 확인해보기
SP_HELPTEXT 성적V

ALTER VIEW 성적V
AS
SELECT 
       이름,
       성별
FROM 성적

SELECT *
FROM 성적V


/**********VIEW 삭제하기*********
DROP VIEW 뷰명
*/
DROP VIEW 성적V


/**********조건이 있는 VIEW*********
WITH CHECH OPTION
*/
ALTER VIEW 성적80
AS
SELECT 
       이름,
       반,
       점수
FROM 성적
WHERE 점수 >= 80
WITH CHECK OPTION

SELECT *
FROM 성적80

-- 여진구의 성적을 70점으로 수정
UPDATE 성적80
SET 점수 = 70
WHERE 이름 = '여진구'
/*
 대상 뷰가 WITH CHECK OPTION을 지정하거나 WITH CHECK OPTION을 지정하는 뷰에 걸쳐 있고
 해당 연산의 하나 이상의 결과 행이 CHECK OPTION 제약 조건을 충족하지 않았으므로 삽입 또는 업데이트 시도가 실패했습니다.

 WITH CHECK OPTION == 조건을 반드시 고수하겠다 == 데이터 값을 고수하겠다.
 UPDATE 성적80
 SET 점수 = 90
 WHERE 이름 = '여진구'
 이깃은 가능하다.
*/


/**********의존성*********
 SP_DEPENDS 개체이름

 개체 이름 == 기본이 되는 테이블명
 SP_DEPENDS TITLES 라고 한다면 TITLES 테이블에 기반을 한 여러 개의 뷰들이 어떤 것이 있는 지 확인할 수 있는 방법
*/
SP_DEPENDS 성적

/* 연습 문제 풀기 14분 ~~ 19분 */
/**********구문 암호화*********
WITH ENCRYPTION
뷰를 만들거나 고칠 때 소스코드를 감추는 것.
암호화시키면 해제 불가(소스코드 별도 보관필요; 소스코드를 확인할 수 없다.)
*/

SP_HELPTEXT 성적VIEW

ALTER VIEW 성적VIEW WITH ENCRYPTION
AS
SELECT
       이름,
       점수
FROM 성적

SP_HELPTEXT 성적VIEW
-- 개체 '성적VIEW'의 텍스트가 암호화되었습니다. (소스테이블이 어떤 것인지 확인할 수 없다.)

/* 연습 문제 풀기 23분 ~~ 24분 */

------------------------------------------------
-- 뷰 활용하기(동영상 수업) - 과제(2) ------------------------------------------------
-- [과제1] 에서 작성한 교수v뷰 생성 구문을 확인하는 sp_로 시작하는 구문을 작성하세요.
-- 스마트IT학과 B반 2023000068 유소영
SP_HELPTEXT 교수v


/**********뷰에 대한 뷰*********
뷰에 근거로 또 다른 뷰를 만들 수는 있지만 복잡해지기 때문에 권장하지 않는다.
뷰는 실제 테이블을 근거로 만드는 것이 좋다.
*/
SELECT *
FROM 성적80

CREATE VIEW 성적2
AS
SELECT
       이름,
       점수
FROM 성적80

SELECT *
FROM 성적2
/*
 어디가지 역추적해야 실제 테이블이 나올 수 있는 지 헷갈리게 된다. 복잡해진다.
 관리가 어렵다.
*/
SP_DEPENDS 성적
-- 성적 테이블을 가지고 만든 것이 아니기에 성적2는 나타나지 않는다. 역추적하기 어렵다.


/**********조인한 뷰 수정하기*********
 두개 테이블 모두 수정해야 한다면 트랜잭션으로 한 번에 한 개 테이블의 값을 처리한다.
 두개 테이블을 조인하면 생성된 뷰에서 두 개 테이블의 값을 한 번에 수정하면 안된다.
 => 두 개 테이블 각각을 수정해야 한다.
*/
-- 제품판매현황; 제품, 판매 테이블 조인하여 작성
SELECT * 
FROM 제품판매현황

SP_HELPTEXT 제품판매현황

-- 예시. 반바지의 종류는 의류, 판매수량은 5로 수정을 한다. ------------------------------------------------
/*
 UPDATE 제품판매현황
 SET 종류 = '의류', 판매수량 = 5
 WHERE 제품명 = '반바지'

 오류 발생: 뷰 또는 함수 '제품판매현황'은(는) 수정 시 여러 기본 테이블에 영향을 주므로 업데이트할 수 없습니다.
 뷰가 근거로 하고 있는 기본 태이블들(2개)에 영향을 준다.
 UPDATE라는 하나의 구문을 사용하지만 결과는 여러 개 테이블을 업데이트 한다. 
 한 번의 구문으로 두 개 이상의 테이블을 수정하는 것은 안 된다.
 하나씩 수정해야 한다.
*/

SELECT *
FROM 제품

SELECT *
FROM 판매

BEGIN TRAN

UPDATE 제품판매현황
SET 종류 = '의류'
WHERE 제품명 = '반바지'


UPDATE 제품판매현황
SET 판매수량 = 5
WHERE 제품명 = '반바지'
-- UPDATE 구문이 각각 실행되었다.

SELECT * 
FROM 제품판매현황

ROLLBACK

------------------------------------------------
-- 뷰 활용하기(동영상 수업) - 과제(3) ------------------------------------------------
-- 교수테이블과 교과목 테이블을 기반으로 조인하여 교수명, 과목명만 볼 수 있는 뷰 '강의과목' 을 생성하세요.
-- 그리고 이 뷰를 출력해보는 구문을 작성하세요.
-- 스마트IT학과 B반 2023000068 유소영
SELECT *
FROM 교수

SELECT *
FROM 교과목

CREATE VIEW 강의과목
AS
SELECT 교수.교수명, 과목.과목명
FROM 교수 JOIN 교과목 과목
ON 교수.교수코드 = 과목.담당교수

SELECT *
FROM 강의과목
